---
title: waitlist.py
---
flowchart TD
    Start([Start]) e1@--> LoadEnvVars[load_env_variables]
    LoadEnvVars --> InitSpotify[initialize_spotify_client]
    InitSpotify --> InitGemini[initialize_gemini_client]
    InitGemini --> InitGenius[initialize_genius_client]
    InitGenius --> LoadCache[load_cache_data]
    LoadCache --> CreatePlaylistManager[Create PlaylistManager]
    
    %% Main menu that directs the program flow
    CreatePlaylistManager --> WhatToDo{what_to_do}
    
    WhatToDo -->|New Recommendations| NewRecsQuestion{Where?}
    NewRecsQuestion -->|Default Playlist| CheckDefaultPlaylist{Default playlist exists?}
    CheckDefaultPlaylist -->|Yes| ClearPlaylist[playlist_replace_items]
    CheckDefaultPlaylist -->|No| NotifyUser[Notify user to set default]
    ClearPlaylist --> BasicProcessDefault[basic_process with default_playlist_id]
    
    NewRecsQuestion -->|Create New Playlist| BasicProcess[basic_process]
    NewRecsQuestion -->|Add to Queue| AddToQueue[add_to_queue]
    
    WhatToDo -->|Settings| SettingsMenu[settings]
    SettingsMenu --> BasicSettings{Settings choice}
    
    %% Advanced settings for managing API keys and cache
    BasicSettings -->|Advanced Settings| AdvancedSettings{Advanced Settings choice}
    AdvancedSettings -->|Clear Auth| ClearAuth[Clear .spotify_cache]
    AdvancedSettings -->|Change API Key| ChangeAPIKey[Update Gemini API]
    AdvancedSettings -->|Clear Cache| ClearCache[Reset cache data]
    AdvancedSettings -->|Output Cache| OutputCache[Print cache data]
    AdvancedSettings -->|Back| SettingsMenu
    
    %% Default playlist management
    BasicSettings -->|Set Default Playlist| SetDefault[Update default_playlist_name]
    SetDefault --> OverrideOrCreate{Override or Create?}
    OverrideOrCreate -->|Override| ChangePlaylistName[change_playlist_name]
    OverrideOrCreate -->|Create New| CreatePlaylist[create_playlist]
    ChangePlaylistName --> UpdatePlaylistCache[Update playlist cache]
    CreatePlaylist --> UpdatePlaylistCache
    
    BasicSettings -->|Change Playlist Name| ChangeName[change_playlist_name]
    BasicSettings -->|Change Description| ChangeDesc[Update playlist description]
    BasicSettings -->|Change Default Limit| ChangeLimit[Update default_limit]
    BasicSettings -->|Back| WhatToDo
    
    WhatToDo -->|Nothing| End([End])
    
    %% Core recommendation process
    subgraph BasicProcessFlow["Basic Process Flow (Main Recommendation Engine)"]
        BasicProcess --> GetDiscoveryType[get_discovery_type]
        GetDiscoveryType -->|"User selects: same music/mood/genre"| FromWhere[from_where]
        FromWhere -->|"Returns Spotify ID"| GetOriginName[id_to_element_name]
        GetOriginName --> CheckIsTrack{is_track?}
        CheckIsTrack -->|Yes| ProcessTrackRec[process_track_recommendation]
        ProcessTrackRec -->|"Returns list of recommendations"| CheckPlaylistId{playlist_id exists?}
        CheckPlaylistId -->|No| CreateNewPlaylist[create_playlist]
        CreateNewPlaylist --> FillPlaylist[fill_playlist]
        CheckPlaylistId -->|Yes| FillExistingPlaylist[fill_playlist with ID]
    end
    
    %% Process for adding tracks to queue instead of playlist
    subgraph AddToQueueFlow["Add to Queue Flow"]
        AddToQueue --> GetQueueDiscoveryType[get_discovery_type]
        GetQueueDiscoveryType --> GetQueueOrigin[from_where]
        GetQueueOrigin --> GetQueueOriginName[id_to_element_name]
        GetQueueOriginName --> ProcessQueueRecs[process_track_recommendation]
        ProcessQueueRecs --> AddTracksToQueue[Add tracks to queue using Spotify API]
    end
    
    %% Music source selection process
    subgraph FromWhereFlow["From Where Flow (Music Source Selection)"]
        FromWhere --> SearchTypePrompt{search_type?}
        SearchTypePrompt -->|Playlist| SelectPlaylist[Select from playlists]
        SelectPlaylist --> ReturnPlaylistId[Return playlist_id]
        
        SearchTypePrompt -->|Song| EnterSongName[Enter song name]
        EnterSongName --> SearchTracks[Search tracks via Spotify API]
        SearchTracks --> SelectTrack[Select from results]
        SelectTrack --> ReturnTrackId[Return track_id]
        
        SearchTypePrompt -->|Liked Songs| GetLikedSongs[Get saved tracks from Spotify]
        GetLikedSongs --> SelectLikedTrack[Select from liked]
        SelectLikedTrack --> ReturnLikedTrackId[Return track_id]
        
        SearchTypePrompt -->|Album| EnterAlbumName[Enter album name]
        EnterAlbumName --> SearchAlbums[Search albums via Spotify API]
        SearchAlbums --> SelectAlbum[Select from results]
        SelectAlbum --> ReturnAlbumId[Return album_id]
        
        SearchTypePrompt -->|Artist| EnterArtistName[Enter artist name]
        EnterArtistName --> SearchArtists[Search artists via Spotify API]
        SearchArtists --> SelectArtist[Select from results]
        SelectArtist --> ReturnArtistId[Return artist_id]
    end
    
    %% AI recommendation process
    subgraph ProcessTrackRecommendationFlow["Process Track Recommendation (AI Integration)"]
        ProcessTrackRec --> ExtractTrackInfo[Extract track & artist names]
        ExtractTrackInfo --> GetAudioDbInfo[get_audio_db_info from TheAudioDB API]
        GetAudioDbInfo -->|"Returns track attributes"| AskAI[ask_ai using Gemini model]
        AskAI -->|"AI generates recommendations"| FormatRecommendations[Format recommendations as song-artist pairs]
    end
    
    %% Add clarifying notes
    classDef note fill:#f9f,stroke:#333,stroke-width:1px;
    
    Note1[/"Cache stores default playlist name/ID,\n recommendation limits, and tokens"/]:::note
    LoadCache --- Note1
    
    Note2[/"User selects discovery type:\nsame music, mood, or genre"/]:::note
    GetDiscoveryType --- Note2
    
    Note3[/"ask_ai sends structured prompt to\nGemini model with track attributes"/]:::note
    AskAI --- Note3
    
    Note4[/"PlaylistManager handles playlist creation,\nrenaming, and adding tracks"/]:::note
    CreatePlaylistManager --- Note4


e1@{ animate: true }